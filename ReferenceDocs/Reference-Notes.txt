

Why OO Programming?
	They are mainly designed to support creation of Software-Application/Solution much similar like real-time application.
	
	
Real-Time Applications are

1. Food-Delivery Service
2. Cab Services
3. E-commerce Application 

They execute realtime process/task. 

Object/s == Real-time Entity

Will carry certain attributes + behaviour = class

A Developer, who develops REAL-TIME Applications...  deal with OOP



Describe Your-Self : Employee

1. name
2. post/position
3. age
4. DOB



Banking Domain :  It can function with the group of objects like
1. Customers	: name,age,dob, address,email,mobile
2. Employees	: name,age,dob, address,email,mobile
3. Account		:





Naming Convention Rules in Java 

1. For Package : type_organization.short_name_org.
					com.yskill.bank.account
2. For Class
3. For Methods




Access Specifiers:  Used to limit scope of class 
4. For 


Data Types : 
Float , Double 

For Implying Encapsulation=
In Java Standards Recommandation says "Always declare attributes as private, so none of other class/methods can directly modifies them"


Variable holds In-Memory data during application execution.

Definition: A Named location in memory which stores value/data of specific type.

Syntax to declare a variable 

ACCESS_SPECIFIER MODIFIER NAME_OF_VARIABLE = INITIAL VALUE

WITHIN CLASS / WITHIN  FUNCTION / WITHIN BLOCK OF CODE

According to place of declaration of variable its scope will be decided. 

what groups of Types DataTypes : 

Primitive 		: holds value/data-item 
Non-primitive 	: It holds memory-address / reference


Is the default value given to every variable all the time?


*****************************  Methods ***********************************

 Method: a block of code to be called to start its execution.
 
 main : a method which begins execution of code/class which is called by Java Tool of JVM.
 
 Java name_of_class.main
 
 static Modifier : 
 
 Method Syntax
 
 access_specifier modifier return_type[optional] name_method (optional parameter)
 
 {    }


access specifier: public, private , protected, package
modifier : final, static, abstract 
return_type : 8-primitive datatypes/ Any Object[non-primitive datatype]


While One class makes use of other class is called IS-A/HAS-A? relationship between class

Interaction between Objects via method.

Methods are basic medium between two objects of Java

In Java Method parameter can be passed in two different ways

1. Passed by Value		: sending values as parameter == variables
2. Passed by Reference  : sending reference/address where data is available


Java allows Constructor overloading : enables static polymorphism + facilitates creation of object with different state.

this = a hidden instance of the current class but can be used only and only within constructor.

Garbage Collector : a dameon thread runs infinitely within JVM. keep scanning all objects and its references 

Object becomes eligible for garbage collection under below circumstances

1. an object is assigned null explicitly
2. an object goes out of scope
3. none-of reference to the object is avialable in memory.




A Pass-by Value technique must be used with business methods which runs independently+ static like Math class methods in Java.lang package


@SpringBootApplication annotation is initializing implicitly 

In Java Memory Management is strictly taken care by JVM- a developer cannot manage/execute/refresh memory explicitly. 

private : Java Coding standards+recommandation , all properties/fields/attributes of class must be private in its nature.



****************************** Day 2 ******************************8

String is a pre-defined class of java.lang package provided to store+manipulate sequence of character.

char = 1character

Java has String Pool to be used for utilizing memory efficiently.


"Ratna" "Ratna" == 25 times in memory ==> wastage of memory by storing redundant/identical strings

Think of string data? ==> are they getting modified frequently for any reason ? If yes then declare them as StringBuffer object and not as String object


write a method which will reverse a string and display it.



we have 3 options to create string objects in java

1. String		  : if data are non-modifyable
2. StringBuffer   : if data are modifyable + multithreaded application
3. StringBuilder  : if data are modifyable + singlethreaded application

In Java two Objects are identical if they have same hashcode. If two Object has exactly same hashcode they they must be equal/identical.


Java program are executed on console[Char-UserInterface] using a command :

java file_name "abc" "xyz" "123" "456" == command line arguments

=============================== Arrays ================================

Arrays: helps in storing homogeneous elements as single variable/object

manipulation / traversal / filteration / becomes easier.

sometime we might want to return multiple values from a function which is quite impossible .

While passing n- arguments we must pass them as array 


Develop an applciation which holds/stores details of 100 student[rollno,name,mobile] during execution 


Array can be created of primitve types only ? Obviously not ==> we can create an array of Objects[implicit/explicit(user-defined)]


Integer, Double, Float, String, Character, Boolean, Byte, Long, Short


e1.compareTo(e2);
e1.id-e2.id =ascending
e2.id-e1.id=descending



static modifier: can be used with variable, methods, class, block of code

static class can only be created as inner class



====================== Relationship between classes =====================

Aggregation : has-a / whole/part helps in code-reusability + modularity 







******************************* Day -3 ***********************************

Inheritance: Code-Reusability, Modify , Expand Is-A relationship Mapping

this = instance of current class
super = instance of base class

Rule 1: When we implement inheritance parent & child class must have atleast one similar syntaxed constructor.

Rule 2: reference variable of base while pointing to its child object cannot call all methods of child class. It can only call common methods between child-parend


Amazon ==> Manufecturer announce some discount from your end- too.
if amazon declares sale ==> manuf must allow some discount too
 
Diwali Festival : announce sale over all products but limited to discount


It all depends on type of product 

Book : 5%
Electronics : 8% [TV = 9%, Mp3Player = 11%]

I want to order a product tell me how much is discount on it? ==> which product ==> Electrnics ? ==>  



In Java : To test any class independently it must contain a main method like below only:

public  static void main(String arg[])




Abstract : can be used with class & method

	when developer want to impose certain behaviour/ feature/method/function  must be available in its child class without fail then they can declare it as abstract method.





Mario : 

First Execution: Basic Mario
basic Mario ==> Super Mario ==> Aqua Mario ==> 


Mario  = mario
	SuperMario =mario=new SuperMario()
	AquaMario =mario=new AquaMario()
	
	
	
Polymorphism : is to have multiple form of same behaviour[methods]/object

	can be implemented in two way : static[Compile-Time], dynamic[Run-time]

Static Polymorphism : during compilation, a compiler should be able to map form of a method to its execution.

authenticate as valid passanger : 1. physical ticket, 2. Message from Agent, 3. soft-copy of your tickets

Calculator: 
Do The Total : 1. ints 2. ints & floats 3. floats & doubles 4. int & doubles


add() method==> should be able to perform addition on any type of numeric [decimal,number] = 4


Cash-Deposit-Machine: 

deposit(2000?,500?,100?) => total amount which we are trying to deposit


========================================================================

Dynamic Polymorphism : during runtime JVM may converts an object to its child type. 


=======================================================================
Generics ?:

means parameterized types.
Using generics we can apply parameterized type to class/interface/method. It also allow creation classes that work with different data types. and those classes/interface/method are called generic type.

<T>

Why ? 

Thumb Rule : Every single class in java has one defualt base class to it 
Object.

Because Object class reference variable can point to any object it lacks type safety

Base b1=new Child()



After storing/ adding/entering data as object in runtime application, when try to read it back JVM will only provide it as Object type 


Generic Function can also be created if the function is not manipulating data [only presenting data as they are received without modifying]

*********************  Day 4 ************************************
Final Modifier : can be used with variable, method, class. 
	
1. Final Variable : Once initialized we cannot modify/change/replace its value


In E-Commerce application sizes for any product like shoes, apparel can be declared as final 

final int small=30cm



2. Final Method :  Once declare a method as final, non of its child class can override it.

In an application when we needed to define a generic behaviour which must be used as it is defined by all of its child type. 

class HRManager{void calcSalary(), void approveLeave(), }
class ProjectManager{void approveLeave()}



3. Final Class :  none of other classes can inherit from a final class. helps in creating an Immutable class definition like String .


To Create a class as Immutable : 
	1. class must be declared Final
	2. All fields of the class must be declared private & final
	3. All private fields must be initialized via argument constructor deep-copy
	4. must have getters for all private field 


Programming Framework : 
Spring --> Application Framework [IOC - runtime container]
Struts --> Web-Framework can be used at UI-layer development[]
Hibernate --> ORM Framework can be used to manage Database Interaction[SessionFactor]

============================  Object Class ========================

if(Object1 == Object2)

Everything what we see except primitive data types is an Object in Java.
Every Java class is by-default a child of Object class 

toString() : is used to represent/display Object[data/state stored in an object] 

When an Object is passed as an argument to println method, It will call toString function.

By default returns fullyQualifiedClassName@HexaString(hashCode)

boolean equals(Object o2) : o1.equals(o2) ==> default behaviour of equals is to compare two objects by looking at its hashCode value

ITS MANDATORY TO OVERRIDE HASHCODE METHOD AS WELL WHILE OVERRIDING EQUALS METHOD


int hashCode() : must return same hashcode for two identical/equal objects
If two Objects are identical then they must have same hashcode



Compare Objects, search an Object , Sort Objects



============================== Wrapper Classes ========================

Data structures in Java has been implemented as pre-defined classes. They are available as Collections API.  Collections classes can store elements as Object only and not allow to store any primitive value.



int id=101 ==> LinkedList ==> int id--> new Integer(101)

Prior to JDK 1.5 developer has to explicitly convert primitive values to wrapper object prior adding them in collection.


ASCII of character : A - 65


============================ Abstract + Interface =====================

Abstract modifier can be used with method, class

Abstract Method:  can not define its body. Cannot contain definition 

Abstract Class: is a class which must contain at-least one abstract method. and can have any no.of concrete methods. We can-not create an instance of abstrcat class. 


All the abstract method of abstrcat class MUST BE OVERRIDEN BY ITS CHILD CLASS. If the child class does not override  abstract method then it also becomes an abstract.



ABSTRACT is to enforce a java class to have certain behaviour mandatorily


Vending Machine: Tea, Coffee , Milk, Flavoured Milk [Beverages]

Interface : 
Use 1 : is a collection of abstract methods[all methods are by default   abstract + public ] till JDK 1.7. From JDK 1.8 onwards Interface can also contain concrete methods[default/static].

Instance of an interface can-not be created.

All the property/fields declared within interface are by default public+static+final


Use 2: Interface helps in providing encapsulation over actual class implementation. Abstraction over implementation.



static Method: make method available without creating an object of the contained class.


final Method: cannot be overriden by child class of the contained class


static var : shared copy between multiple[n] object of the class
Final var : non-modifyable 


============================ Functional Interface =======================

Functional Interface : is an interface which container exactly one[--only one] abstract method. They are also called sometime as SAM-Interface.

Lambda Expression : helps to reduce anonymous class creation.

  (method - arguments ) -> {logic of method /return something}

Lambda-Expression helps in reducing complexity of overriding single abstract method. and reduce the code size to maximum possibility.



*********************** Collection Framework ***************************

Data structures to manage bulk data[big amount of data] in-memory[during execution of code]

c, c++ : require developer to handle creation of these data-structures. 

Java : it has created all basic[most-required] data structure and provided to be used readily by Java-Developers.

java.util : is a collection of classes+interfaces to deal/work with any kinds of data-structure.

Collection Framweork : is provided as class+interface hierarchy. Is divided in 3-flavours/category

Algorithms: are provided by pre-defined classes in java.util package as methods

1. List : is used to create collection in which we bother/expect their
		  insertion order is maintained. [allow duplicate elements]
		  3-Implementation classes:  ArrayList, LinkedList, Vector
		  
		  ArrayList : Ordered List as resizable array. but can traverse in forward only direction.== singly-linkedlist ==> SingleThreadedApplication.
		  
		  Real-Time Example : passportsevakendra online, Bank Offices tokens
		  
		  LinkedList : Ordered list allowing traversal in both direction. each element is linked with its previous element.= Doubly-linkedList
		  
		  Browser history, Music-apps => playlist,.....
		  
		  Vector : is a synchronized version of ArrayList. ==> MultiThreaded Application
		  
		  Memory Management in Runtime Environments
		  
2. Set	:  Unique elements collections.
			HashSet : creating unique collections and not follows any ordering of elements[store elements in random sequence.]
			
			Java uses HashSet to create list of object during runtime.
			Developing cart object in e-commerce application
			
			TreeSet : creating unique collections. store elements in sorted order by-default.
			
			Online Library.
			
			LinkedHashSet : Unique Collection + store elements in insertion-order
			
			udemy , movies , 
			
			Using Stream API we can sort set collection

3. Map   :  Stores elements as key=value pair. 

			HashMap			: creates simple key=value based collection.
			
			TreeMap			: creates k=v collection by keys stored in 
							  sorted sequence implicitly[if they are 
							  primitives]
							  
			LinkedHashMap	: creates k=v collection by keys stored in 
							  insertion ordered sequence implicitly[if they are primitives] 
							  
		We can use custom object as key. if the key is custom object then we must define comparison logic + sorting logic in object definition.

Key : 8-primitive + String + CustomObject
Value: 8-primitive + String + CustomObject
___________________________________________________________
Disadvantage:
If base reference of collection interface is used to create collection then we cannot use all specialized method of collection class.

Advantage:
It helps in converting same reference variable to any other collection type[can perform dynamic polymorphism]


Natural Ordering : In Java all primitives+Strings are considered as Natural data. Hence Natural Ordering will sort this data in ascending by default int,long,short,byte,double,float,boolean,char, String 

JDK 5.0 onwards int=Integer

To check equality of Objects Java calls equals method which compares hashCode values of object 

Check equality of Objects : override equals + hashCode methods
Check which Object falls first in sorting : override compareTo method by implementing Comparable Interface.

Lambda Expression to override compare method of Comparator interface of java.util package



Create a POJO for author and design a TreeSet  + LinkedList collection of it

print all these collectins in ascending+descending order  with atleast 10 elements.



----------------------------Sorting of Collection's Objects---------------

1. Comparable Interface : It can sort data with exactly one logic at a time ==> Override compareTo(Object o2)


2. Comparator Interafce: It can allow to define multiple sorting logic.
==> compare(Object o1,Object o2)


**************** Map Collection Interface **********************

Map : is an interface which provides key=value pair collection to be created.
case-number = case-status
CNR-number= case-status

Real-Time Example : passport , e-aadhar , juridical-applications provides an UI-interface  to find information about.
 
Passport-number = Processing/VerificationInProgress
243546= VerificationInProgress
846633= VerificationInProgress



Banking application : its mandatory to link an aadhar-->PAN Card number.
class [aadhar_card+pan_card] : new Person()

Practice Assignment 
To Sort HashMap based on keys:

1. Conver hashmap ==> treemap
2. readKeys ==> set ==> stream.sorted()
3. readKey ==> TreeSet [get sorted implicitly]


sort method(comparator argument)=> converting existing map to sorted by different field = after insertion they gets sorted.

While creating map ==> sorting logic then map will sort elements during insertion.



===========================Service Layer Using ==========================

Type of Applications are :

1. Monolithic  : Contains all application logic as single Program/been 
				 executed in single environment.
2. Two-Tier / Client-Server
3. Multi-Tier / EnterPrise 


To build a Service Layer of an Enterprise Application we need to develop an application which will handle Login functionality.

1. Accept Credential : UserInterface ==> Console-Based [only the class which will carry a main method] hence it's called as an entry point of application.

2. Read-Input ->Pass it to Service layer  : Controller [which handles the flow of an application] ==> JavaProgram[without main function]

3. ServiceImplementation : contains actual business logic of an application.

4. PersistenceLayer : Repository ==> Java class which contains data/hold the data reded from database.

5. Data-TransferObject DTO: a simple Java POJO class which will hold the data and transfers them back-forth.


1. UserInterface : A Java class[with Main]
2. Controller : LoginController[A Java Class ]
3. LoginServiceImpl : A Java [may add interface to implement abstraction layer]
4. LoginRepository : contains actual data [act as database+Interface]




To Build any applciation we may follow development approach.

1. Top-Down approach
2. Bottom-up approach

is a way of developing application following UI-Layer--> ServiceLayer -->PersistenceLayer

PersistenceLayer --> ServiceLayer --> UI-Layer.

Service ==> Repository


To Convert an java-application to spring based application we have to develop maven-project and add Spring framework as maven-dependency so that we can use spring annotations/classes/interfaces to make our Enterprise applicationd evelopment easier+faster+less-Configuration code



Dependency: 

Loosely-coupled : they can be re-used & becomes Unit-Testable==> TDD
Tightly-coupled : they require other class to be avialable during testing hence TDD is not possible with this kinds of applications.



Spring Framework : Advantages

1. Dependency Management with less/no need of configuraing
	Spring uses its core container called IOC which creates required Objects of class for another class and pass them as Dependency using Dependency-Management technique.
	
	Inversion-Of-Control is a feature [DI]of Spring-Framework
	
2. Dependency-Management: can be done by configuration. Spring follows multiple ways of configuration
	a. XML-Based Configuration: proven to error-prone 
	b. Java-Based Configuration
	c. Annotation-Based Configuration	
	
	
	Every Java class of Spring-based application must be configured using any of given annotation:
	@Configuration, @Bean, @Repository, @Component, @Controller
	@Bean : A generic annotation can be given to any Java class
	@Configuration : can be given to the class which contains logic of dependency-management[]
	


Maven : Is a build tool to manage required dependencies[JARs] for a project. 



How to Configure Spring application which manages dependencies through IOC container.


Properties file : collection of key=value data. which may database configuration details/ credentials to connect with DB/ messages


JRE == IOC -  Container[an application written in java to manage dynamic creation of objects during runtime]




************************** Service Layer Using Spring ********************

Spring Bean's Life Cycle Methods to interact with IOC container during instantiation of bean instace.



Spring Annotation-Based Configuration : 

Autowiring: When IOC container inject the dependencies into dependent bean class WITHOUT DEFINING IN CONFIG class is a feature called Autowiring.


Autowiring can be used with @Autowired annotation marked to PROPERTIES OF BEAN.
Autowiring can be used with @Autowired annotation marked to setter methods.
Autowiring can be used with @Autowired annotation marked to constructor methods.



With Spring Boot project it will not require any config file iIF WE FOLLOW " STANDARD PROJECT DIRECTORY STRUCTURE "



Connecting Spring application to backend database.

1. Any Database instance 
2. Add driver dependency in pom.xml
3. Configure DB-Connection ==> URL , useName, Password, dialect [.properties]

4. add Respository [pre-defined CrudRepository, JpaRepository]


Using Spring Boot we can develop spring application with DB-Connectivity without writting single line of configuation+JDBC logic.


Stand-alone vs Web-Application



Spring-Boot application can be created as :

1. Spring starter project
2. Using Sprint Initializer
3. Create Maven-Project and add Spring-boot-starter

1. Stand-Alone     :  are the application run locally to the system
2. Web-Application :  always require server connection. Are available 24*7*365 days  on any platform/device

For WebApplication servers are providing Runtime Environment on which they can be managed via server itself.

Web-Hosting : GoDaddy

Spring Boot consists of embedded server, No need for XML-based Configuration[which is intern an error prone]

@SpringBootApplication = 
@Configuration[default to application.properties] + 
@ComponentScan [default to all sub-packages of SpringBootApplication class]+ 
@EnableAutoConfiguration[== used to avoid need of SpringConfig file]


Every Physical server there are a log files getting generated everyday which is consisting of each information[metadata] of client whose request been processed.

Log-Files: text based files stores application/server information. Logging Technique 


***************************** Spring Boot *****************************
An Enterprise Application is a collection of n-Entities

Entity[Living] : Customer, Employee, Supplier, User 
Entity[Non-Living] : Product, Order, Account, Transaction, Group


E-Commerce Application: Customer, Product, Order, Supplier

Spring Boot : Always consider each Table as Seperate Entity and design its repository.


Spring Boot : Stand-Alone CRUD application. Hibernate is the default ORM framework for Spring Boot Application.


Dialect class : used to generate SQL syntax according to underlying database [& version specific too].

==================== Logging  in Spring Boot ========================

Spring Boot uses Apcahe Commons Logging for logging mechanism implicitly.
If a developer need to use other Logging APIs/Libraries then developer has to Override default configuration.


What is Logging? : is a way to print[console]/store[file] Application's information such as. Info / Error / Debug / Warning / FATAL
Based on Type of an Information they are categorized as :

INFO, ERROR, WARN, FATAL, DEBG ==> Logging LEVEL Which can be configured


To Use Log4j API for Logging in Spring Boot application. developer have to create seperate configuration file named "log4j2.properties"


=====================  CRUD in Spring Boot =========================
Twitter : performs all CRUD operation in the form of 

Create : create new User-Account
Read   : Login/browse twits on our home page 
Update : Modify/change email/mobile-no of user OR Change profile pic of 
	     a user
Delete : delete an account of a particular user

E-Commerce : Also performs CRUD operation

Create : place new order [internally creates new Order object]
Read   : check - Status of an order
Update : Modify/change delivery-Address/ Payment-mode
Delete : Order Cancellation


We can let Spring - boot application to create Database+Tables on behalf of developer. For which we will us eSpring Boot Data API.


select max(rollno)+1 from students


When data need to be trasfered between Back-end to Front-End must have simple form of Object and not as any specialized object



Java : POJO [no entity]
React/Angular : POJO ==> JSON Object

Spring Data JPA API : provides a feature called Query By Method Name.
Generates dynamic query based on method naming


=============== Mapping in ORM Layer of Spring Boot Application  =========

1. OneToMany : 
2. ManyToOne : 
3. ManyToMany [1 & 2]
4. OneToOne : 


Customer[fk-child]  ==  Address[pk] [In which domain they would be used?]
Ratna -> OneToOne ==> iMobile, e-Aadhar
Kiran -> OneToMany  ==> E-Commerce,Food DeliveryServices
Liketh --> ManyToOne ==> CommunityBased[Shaddi.com]


Employee == Department 
ManyToOne 
Uni-directional
Bi-directional 


SAM --> 20 ProjectManager
SAM --> 40 SeniorArchitect

40 --> SAM, Rahul, Reena, Iliyaz




************************ REST-API Module ***************************


API : a service provided by an application which can be utilized by any third-party application.

For Example : Uber, Ola, Rapido are the cab/auto rental service application requires GPS ==>Importing[Consuming] as third party API service provided by GOOGLE.

API Service: can be consumed by any application developed/running on any technology/device.

Hence while developing API/service, developer must consider cross-platform/cross-technology support to be provided.

Java : int,long,double,float
Node+Expres : Number

Any programming language has a core/basic unit of code is called as: 

	{int a=20,b=5,c=0
	c=a/b;
	sysout(result:c)}
	
	Method ==> specifier modifier return_type method_name(optional argument)


c programming ==> call method
c++/Java/.Net ==> create an instance ==> instace.method_name

Method should be called independently

API must be avialable to every application 24*7*365 ==> web[internet] ==> web-server
 
Method ==> URL ==> becomes available over internet ==> web-programming

http://localhost:8080/studentApp?name="ratna"&stream="IT"[HTTP - GET]
		==> name & stream are the QueryParam

http://localhost:8080/studentApp/students/101 ==> 101=PathVariable

name="ratna"&stream="IT" ===> QueriString 

http://localhost:8080/studentApp[HTTP - POST]
{
	requestBody:{name:"ratna",stream:"IT"}==> JSON-Object [Student]
}

There are two types of services[API] can be developed :


1. SOAP WebService : XML-message <==> parse-message <==> run logic
			XML programming are proven as error-prone == hence they are the last choice for developer. SOAP

2. RESTful WebService :  HTTP

	XML-message/JSON-message/Text-message/HTML-FormData <==>
	
	To create RESTful Web service using Spring Boot project,developer has to add spring-web dependency [default server tomcat]
	Developer has to use REST-based annotations to convert Stand-alone spring boot application to the RESTful-spring boot application
	
	
	@Controller ==> @RestController
	@RequestBody // @PathVariable // @QueryParam
	@requestBody / @QueryParam to read input of data
	@PathVariable = is only used to read any URL parameter
	

====================== Steps to Build RESTful webservice ================

1. Create Spring boot project
2. add Spring-web dependency[spring-data+mysql]
3. follow same architecture as CRUD application.
4. Define mapping of service methods with respective URLs inside controller[RestController]
5. Run application 
6. Test all crud operation via browser/Postman


lat + lon == new address




------------------------------------------------------------------------


RESTful webservice development follows URL-declaration standards

server URL : http://localhost:8080

Resource  /emps OR /employees ==> URI

Read Operation : HTTP-Get ==> @GetMapping("/emps")


One Web-Application ==> n-APIs ==> n-Method Level mapping

=========================== Consuming REST-API ===========================

Web-Service: are collection of Service Endpoints to perform basic CRUD operation + specific operation on resource.

Resource : is an entity associated with 1 - RestAPI == 1=Table in DB

Association in REST API: 

Order : getOrderDetails/1987 ==> Order[date,amount,no.ofProducts [products[]]]


RESTTemplate : a class allow consuming of REST API within Java Class

Consuming REST-API /Endpoint within Java class .

Till Now our REST-API

ResponseEntity :  a class helps converting Java-Object to Response type[HTTP]. Advantage of doing it is a developer can customize response , configure response-type, configure HTTP-Response Status code  




Exception Handling in RESTful Services plays a vital role to communicate actual problem/error to an end-user to give an idea about what went wrong while accessing the services.


Postman [JSON Object]: Alpha-numeric value 

SQLException ==? A kind of Error


Exception : 1, 2, 3, 4, 5, 6  ==> It interrupts Normal flow of program/code.

A Cause of Exception could be : Logical mistake, Unexpected Data input, Unexpected Data Accessibility == Programatical problem/mistake.

DivideByZero = 

A Developer must have an idea about possible exceptions while writing a program logic. And must handle them in user-friendly way.

Error :  Caused by Runtime/External-resource/External-API


Handle Exception in two different way:

1. Handle Exception @ the place where it occurs [within the method]
2. Declare an Exception to be handled by Calling Method.

In Rest API central exception handler class can be created to handle all/any kinds of exception

ExceptionHandler == @RestControllerAdvice

Feature Spring 5.0  is use ResponseStatusException class which allows to handle exception within API itself.



Customer == Address 

1. E-Commerce : OneToMany
2. Banking    : OneToOne


Syntactical Architecture of project to handle exception: 
	Clear seperation of each concerns of my enterprise application ==> RestControllerAdvice
	
Programatic way of handling Exception in REST API:
	ResponseStatusException  : used to throw an exception explicitly


Cross-Origin Resource Sharing :  While two different servers need to communicate for sharing data.



Field must not kept empty == NotNull
Email == Valid email
dateOfBirth ==  past/present





